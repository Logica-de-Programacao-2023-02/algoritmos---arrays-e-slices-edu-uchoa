1- Crie um Array de inteiros com 3 elementos e imprima a soma dos valores armazenados no Array.

package main
import "fmt"
func main() {
 array := [3]int{1,2,3}
 soma := 0
 for_, valor := range array {
 soma += valor
 } 
 fmt.Printf("A soma dos elementos do array é: %d\n", soma)
}

2-Crie um Slice de inteiros com os valores 1, 2, 3, 4 e 5. Remova o terceiro elemento e imprima o Slice resultante.

package main
import "fmt"
func main() {
 numeros := []int{1,2,3,4,5}
 if len(numeros) > 2 {
 numeros = append(numeros[:2], numeros[3:]...)
 }
 fmt.Println(numeros)
}

3-Crie um Array de floats com 4 elementos e calcule o produto dos valores armazenados no Array.

package main
import "fmt"
func main() {
 numeros := [4]float64{2.4, 3.3, 4.2, 5.9}
 produto := 1.0
 for _, valor := range numeros {
 produto *= valor
 }
 fmt.Printf("O produto dos elementos do array é: %.2f\n", produto)
}

4-Crie um Slice de inteiros e solicite ao usuário que informe o tamanho do Slice e os valores dos elementos. 
Em seguida, imprima o Slice e a soma dos valores armazenados.

package main
import "fmt"
func main() {
 var tamanho int
 fmt.Print("Informe o tamanho do Slice: ")
 fmt.Scan(&tamanho)
 if tamanho <= 0 {
  fmt.Println("O tamanho do Slice deve ser um número positivo.")
  return
 }
 numeros := make([]int, tamanho)
 for i := 0; i < tamanho; i++ {
  fmt.Printf("Informe o valor do elemento %d: ", i+1)
  fmt.Scan(&numeros[i])
 }
 fmt.Println("O Slice informado é:", numeros)
 soma := 0
 for _, valor := range numeros {
  soma += valor
 }
 fmt.Printf("A soma dos elementos do Slice é: %d\n", soma)
}

5.Crie um Array bidimensional de inteiros com 3 linhas e 2 colunas. Solicite ao usuário que informe os valores de cada elemento da matriz. 
Em seguida, imprima a matriz resultante.

package main
import	"fmt"
func main() {
	matriz := [3][2]int{}
	for i := 0; i < 3; i++ {
		for j := 0; j < 2; j++ {
			fmt.Printf("Digite o valor para matriz[%d][%d]: ", i, j)
			fmt.Scan(&matriz[i][j])
		}
	}
	fmt.Println("Matriz Resultante:")
	for i := 0; i < 3; i++ {
		for j := 0; j < 2; j++ {
			fmt.Printf("%d\t", matriz[i][j])
		}
		fmt.Println()
	}
}

6.Crie um Array de inteiros com 10 elementos. Em seguida, solicite ao usuário que informe um valor e verifique se esse valor
está presente no Array. Imprima o resultado da busca.

package main
import "fmt"
func main() {
	array := [10]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
	var valor int
	fmt.Print("Digite um valor para verificar se está presente no array: ")
	fmt.Scan(&valor)
	encontrado := false
	for _, elemento := range array {
		if elemento == valor {
			encontrado = true
			break
		}
	}
	if encontrado {
		fmt.Printf("O valor %d está presente no array.\n", valor)
	} else {
		fmt.Printf("O valor %d não está presente no array.\n", valor)
	}
}

7.Crie um Slice de inteiros com o tamanho 5. Em seguida, solicite ao usuário que informe um número inteiro. 
Adicione esse número ao Slice apenas se ele não estiver presente. Imprima o Slice resultante.

package main
import "fmt"
func main() {
	slice := make([]int, 5)
	var numero int
	fmt.Print("Digite um número inteiro: ")
	fmt.Scan(&numero)
	estaPresente := false
	for _, elemento := range slice {
		if elemento == numero {
			estaPresente = true
			break
		}
	}
	if !estaPresente {
		slice = append(slice, numero)
	}
	fmt.Println("Slice Resultante:", slice)
}

8.Crie um Slice de strings com tamanho 8 e solicite ao usuário que informe um valor.
Remova todas as ocorrências desse valor no Slice e imprima o resultado.

package main
import "fmt"
func main() {
	slice := []string{"apple", "banana", "cherry", "date", "apple", "fig", "banana", "grape"}
	var valor string
	fmt.Print("Digite um valor para remover do slice: ")
	fmt.Scan(&valor)
	novoSlice := make([]string, 0)
	for _, elemento := range slice {
		if elemento != valor {
			novoSlice = append(novoSlice, elemento)
		}
	}
	fmt.Println("Slice Resultante:", novoSlice)
}

9.Crie um Array de floats com 6 elementos. Solicite ao usuário que informe um número que será adicionado em todas as posições do Array.
Imprima o Array resultante.

package main
import "fmt"
func main() {
	array := [6]float64{1.1, 2.2, 3.3, 4.4, 5.5, 6.6}
	var numero float64
	fmt.Print("Digite um número para adicionar em todas as posições do array: ")
	fmt.Scan(&numero)
	for i := 0; i < len(array); i++ {
		array[i] += numero
	}
	fmt.Println("Array Resultante:", array)
}

10.Crie um Slice de inteiros com tamanho 10 e imprima o valor mínimo e o valor máximo armazenados no Slice.

package main
import (
	"fmt"
	"math"
)
func main() {
	slice := []int{5, 2, 8, 1, 10, 3, 7, 4, 9, 6}
	minimo := math.MaxInt
	maximo := math.MinInt
	for _, valor := range slice {
		if valor < minimo {
			minimo = valor
		}
		if valor > maximo {
			maximo = valor
		}
	}
	fmt.Printf("Valor Mínimo: %d\n", minimo)
	fmt.Printf("Valor Máximo: %d\n", maximo)
}

11.Crie um Array bidimensional de inteiros com 2 linhas e 3 colunas. Em seguida, solicite ao usuário que informe
um índice de linha e outro de coluna e imprima o valor armazenado nessa posição da matriz.

package main
import "fmt"
func main() {
	matriz := [2][3]int{
		{1, 2, 3},
		{4, 5, 6},
	}
	var linha int
	fmt.Print("Digite o índice de linha (0 ou 1): ")
	fmt.Scan(&linha)
	var coluna int
	fmt.Print("Digite o índice de coluna (0, 1 ou 2): ")
	fmt.Scan(&coluna)
	if linha >= 0 && linha < 2 && coluna >= 0 && coluna < 3 {
		valor := matriz[linha][coluna]
		fmt.Printf("Valor na posição [%d][%d]: %d\n", linha, coluna, valor)
	} else {
		fmt.Println("Índices fora dos limites da matriz.")
	}
}

12.Crie um Array de inteiros com 5 elementos. Em seguida, crie um novo Slice que contenha apenas os 
elementos do Array que são múltiplos de 3. Imprima o novo Slice.

package main
import "fmt"
func main() {
	array := [5]int{9, 4, 7, 12, 15}
	slice := []int{}
	for _, elemento := range array {
		if elemento%3 == 0 {
			slice = append(slice, elemento)
		}
	}
	fmt.Println("Novo Slice contendo múltiplos de 3:", slice)
}

13.Crie um Array de inteiros com 7 elementos. Solicite ao usuário que informe um número que será adicionado
ao primeiro e ao último elemento do Array. Imprima o Array resultante.

package main
import "fmt"
func main() {
	array := [7]int{2, 4, 6, 8, 10, 12, 14}
	var numero int
	fmt.Print("Digite um número para adicionar ao primeiro e último elemento: ")
	fmt.Scan(&numero)
	array[0] += numero
	array[len(array)-1] += numero
	fmt.Println("Array Resultante:", array)
}

14.Crie um Slice de inteiros com tamanho 8 e solicite ao usuário que informe dois índices de elementos
que deverão ser trocados de posição. Imprima o Slice resultante.

package main
import "fmt"
func main() {
	slice := []int{1, 2, 3, 4, 5, 6, 7, 8}
	var indice1, indice2 int
	fmt.Print("Digite o índice do primeiro elemento: ")
	fmt.Scan(&indice1)
	fmt.Print("Digite o índice do segundo elemento: ")
	fmt.Scan(&indice2)
	if indice1 >= 0 && indice1 < len(slice) && indice2 >= 0 && indice2 < len(slice) {
		slice[indice1], slice[indice2] = slice[indice2], slice[indice1]
		fmt.Println("Slice Resultante:", slice)
	} else {
		fmt.Println("Índices fora dos limites do slice.")
	}
}

15.Crie um Array de floats com 10 elementos. Crie um novo Slice que contenha apenas os elementos do Array que são maiores que 5.
Imprima o novo Slice.

package main
import "fmt"
func main() {
	array := [10]float64{2.5, 6.8, 4.2, 7.1, 8.5, 3.0, 9.7, 1.2, 6.0, 10.3}
	slice := []float64{}
	for _, elemento := range array {
		if elemento > 5 {
			slice = append(slice, elemento)
		}
	}
	fmt.Println("Novo Slice contendo elementos maiores que 5:", slice)
}

16.Crie um Array de inteiros com 10 elementos. Crie um novo Slice que contenha apenas os elementos pares do Array original.
Imprima o novo Slice.

package main
import "fmt"
func main() {
	array := [10]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
	slice := []int{}
	for _, elemento := range array {
		if elemento%2 == 0 {
			slice = append(slice, elemento)
		}
	}
	fmt.Println("Novo Slice contendo elementos pares:", slice)
}

17.Crie um Array de inteiros com 10 elementos. Calcule e imprima a soma dos elementos nas posições pares do Array.

package main
import "fmt"
func main() {
	array := [10]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
	soma := 0
	for i, elemento := range array {
		if i%2 == 0 {
			soma += elemento
		}
	}
	fmt.Printf("A soma dos elementos nas posições pares é: %d\n", soma)
}

18.Escreva um programa que leia um número inteiro positivo n e gere um array com os n primeiros números primos.

package main
import (
	"fmt"
	"math"
)
func main() {
	var n int
	fmt.Print("Digite um número inteiro positivo n: ")
	fmt.Scan(&n)
	if n <= 0 {
		fmt.Println("Por favor, digite um número inteiro positivo.")
		return
	}
	numerosPrimos :=gerarPrimos(n)
	fmt.Printf("Os %d primeiros números primos são: %v\n", n, numerosPrimos)
}
func gerarPrimos(n int) []int {
	primos := []int{}
	numero := 2
	for len(primos) < n {
		if ehPrimo(numero) {
			primos = append(primos, numero)
		}
		numero++
	}
	return primos
}
func ehPrimo(num int) bool {
	if num < 2 {
		return false
	}
	limite := int(math.Sqrt(float64(num)))
	for i := 2; i <= limite; i++ {
		if num%i == 0 {
			return false
		}
	}
	return true
}

19.Faça um programa que leia dois arrays de inteiros de tamanho n e gere um terceiro array que seja a soma dos dois primeiros.

package main
import "fmt"
func main() {
	var n int
	fmt.Print("Digite o tamanho dos arrays (n): ")
	fmt.Scan(&n)
	if n <= 0 {
		fmt.Println("Por favor, digite um tamanho válido para os arrays.")
		return
	}
	array1 := lerArray("Digite os elementos do primeiro array:", n)
	array2 := lerArray("Digite os elementos do segundo array:", n)
	arraySoma := somarArrays(array1, array2)
	fmt.Println("O terceiro array (soma) é:", arraySoma)
}
func lerArray(mensagem string, tamanho int) []int {
	array := make([]int, tamanho)
	fmt.Println(mensagem)
	for i := 0; i < tamanho; i++ {
		fmt.Printf("Elemento %d: ", i+1)
		fmt.Scan(&array[i])
	}
	return array
}
func somarArrays(array1, array2 []int) []int {
	if len(array1) != len(array2) {
		panic("Os arrays devem ter o mesmo tamanho para serem somados.")
	}
	resultado := make([]int, len(array1))
	for i := 0; i < len(array1); i++ {
		resultado[i] = array1[i] + array2[i]
	}
	return resultado
}

20.


